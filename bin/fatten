#!/usr/bin/env perl

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine;

# VERSION

Perinci::CmdLine->new(url => '/App/fatten/fatten')->run;

#ABSTRACT: Pack your dependencies onto your script file
#PODNAME: fatten

=head1 SYNOPSIS

 # by default includes all non-core modules and outputs to <INPUT>.packed
 % fatten bin/script.pl

 # some options (set target perl version, output, debug)
 % fatten --perl-version v5.10.1 -o /tmp/script.pl --debug bin/script.pl

 # see more options
 % fatten --help


=head1 DESCRIPTION

B<fatten> uses L<App::FatPacker> to package a Perl script with its dependencies.
B<fatten> simplifies the packing process, adds some nice defaults and options
(like C<--strip>). It has the same limitation as App::FatPacker's, in that
currently it only pack .pm Perl module files and not XS modules or other extra
stuffs like shared files, message catalogs (C<.mo>), etc.

By default it aims to produce a packed script that can run on a stock Perl
installation that has only core modules. Thus, it packs all non-core modules
required by the script. However, since it doesn't handle XS modules, in many
cases this goal is not reachable, e.g. popularly-used modules like
L<List::MoreUtils> is XS. If you want to create an installer or bootstrap script
that can only rely on core modules, you have to select modules you use
carefully.


=head1 TODO/ISSUES

=over

=item * 'fatpack trace' doesn't give minimum version of required modules

Perhaps alternatively use L<Perl::PrereqScanner> or something like?

=item * Hasn't handled the case of modules that are core in an earlier version of perl but become non-core in a later version

=back


=head1 SEE ALSO

L<App::FatPacker>

For producing free-standing Perl scripts/applications, there are other
alternatives like L<PAR::Packer> (can also pack XS modules and compress the
included files in a special archive, but with higher startup time and temporary
directory to extract stuffs).

L<Perl::Stripper>

=back
