#!perl

# DATE
# VERSION

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::fatten;

Perinci::CmdLine::fatten->new(
    log => 1,
    url => '/App/fatten/fatten',
)->run;

#ABSTRACT:
#PODNAME:

=head1 SYNOPSIS

Basic usage (input & output):

 # by default outputs to '<script>.fatpack' in the source directory, or in
 # current directory if source directory is not writable.
 % fatten bin/script.pl

 # specify output path
 % fatten bin/script.pl -o /tmp/script.pl

 # output to stdout
 % fatten bin/script.pl -o -

 # input from stdin (output will default to stdout, unless you give -o)
 % download-perl-script | fatten

 # see debug messages (what modules are being traced and included, etc)
 % fatten --debug <script.pl >script.fatpack

Including and excluding modules:

 # add some more modules not detected by the tracer
 % fatten -I Foo::Bar -I Foo::Baz bin/script.pl -o script.fatpack

 # change trace method, usually 'require' will give pretty complete result
 % fatten -t require <script.pl >script.fatpack

 # don't trace modules from script, but include all modules found under 'fatlib'
 % fatten -t none --include-from-dir fatlib bin/script.pl -o script.fatpack

See more options:

 % fatten --help


=head1 DESCRIPTION

 "Thank you for a freakin awesome app. Seriously, fatten is great! <3"
 -- Paul J. Fenwick

B<fatten> is an alternative command-line script for L<App::FatPacker>. I had a
few issues when using the B<fatpack> script which comes with C<App::FatPacker>.
Some of these issues have been fixed, but fatten still offers some
options/features which I personally use. I will also perhaps suggest some of
these features to be merged to fatpack.

Differences from fatpack:

=over

=item * Different defaults

Currently B<fatten> ignores C<fatlib/> and XS modules. It only focuses on
creating free-standing Perl script which depends on pure-Perl modules (C<.pm>
files) only. Including C<fatlib/> to a stand-alone script will require an
approach like L<PAR::Archive> anyway (i.e. bundling the required files in an
archive and extracting the required files into a temporary directory).

By default B<fatten> skips Perl core modules. This results in a smaller product.

B<fatpack> sometimes fails to include some modules because it can't find the
C<.packlist> for said modules. B<fatten> goes ahead and tries the next best
thing which is to copy just the C<.pm> files.

=item * Alternative methods to trace script's dependencies

There are various methods of tracing a script's dependencies, each with their
own pro's and con's. B<fatpack> checks C<%INC> in the C<CHECK> phase, and this
misses modules loaded during run-time using C<require>. Other methods include:
trapping C<require> (but this can also miss modules loaded conditionally
depending on execution path), static analysis using L<Perl::PrereqScanner> (this
can also miss some modules loaded in unusual ways).

B<fatten> uses L<App::tracepm>, which provides various methods of tracing. See
App::tracepm documentation for more details.

Of course, like B<fatpack>, you can also specify additional modules to include.
And, unlike B<fatpack>, you can specify modules to exclude as well.

=item * More options to include/exclude modules

You can include/exclude invidual modules, or whole dists, or all modules located
in a directory. You can also include/exclude a module *and* its dependencies,
recursively (see C<--include-prereq> and C<--exclude-prereq>).

=item * Other extra features

Like an option to strip/squish the module source codes with L<Perl::Strip>
(C<--strip>) or L<Perl::Stripper> (C<--stripper>) or L<Perl::Squish>
(C<--squish>).

=item * Configuration file support

See L</"CONFIGURATION FILE"> for more details.

=back


=head1 append:CONFIGURATION FILE

Profiles are also automatically matched to the name of the script being
processed, if not specified. For example:

 [profile=parse-id-phone]
 trace_method=require
 #overwrite=1
 include=Parse::PhoneNumber::ID
 include=Perinci::CmdLine::Lite
 include=Data::Check::Structure
 include=Text::Table::Tiny

which will automatically be used when you fatten a script named
C<parse-id-phone>.


=head1 SEE ALSO

L<App::FatPacker>

For producing free-standing Perl scripts/applications, there are other
alternatives like L<PAR::Packer> (can also pack XS modules and compress the
included files in a special archive, but with higher startup time and temporary
directory to extract stuffs).

L<Perl::Stripper>
