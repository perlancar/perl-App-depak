#!/usr/bin/env perl

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine;

# VERSION

Perinci::CmdLine->new(url => '/App/fatten/fatten')->run;

#ABSTRACT: Pack your dependencies onto your script file
#PODNAME: fatten

=head1 SYNOPSIS

 # by default outputs to <INPUT>.packed
 % fatten bin/script.pl

 # some options (set target perl version, output, debug)
 % fatten --perl-version v5.10.1 -o /tmp/script.pl --debug bin/script.pl

 # see more options
 % fatten --help


=head1 DESCRIPTION

B<fatten> uses L<App::FatPacker> to package a Perl script with its dependencies.
B<fatten> simplifies the packing process, adds some nice defaults and options
(like C<--strip> to strip module source files using L<Perl::Stipper>, or
C<--use-prereq-scanner> instead of C<fatpack trace>). It has the same limitation
as App::FatPacker's, in that currently it only pack .pm Perl module files and
not XS modules or other extra stuffs like shared files, message catalogs
(C<.mo>), etc.


=head1 TODO/ISSUES

=over

=item * Has not checked minimum version of modules (if using Perl::PrereqScanner)

=item * Hasn't handled the case of modules that are core in an earlier version of perl but become non-core in a later version

=item * Cache Perl::PrereqScanner result

=back


=head1 SEE ALSO

L<App::FatPacker>

For producing free-standing Perl scripts/applications, there are other
alternatives like L<PAR::Packer> (can also pack XS modules and compress the
included files in a special archive, but with higher startup time and temporary
directory to extract stuffs).

L<Perl::Stripper>

